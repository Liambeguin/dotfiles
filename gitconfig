[core]
	abbrev = 12

[status]
	showStash = true

[pretty]
	fixes = Fixes: %h (\"%s\")
	ol = %C(auto)%h %<(50,trunc)%s %d %C(green)%cr%Creset %C(blue)%<(15,trunc)%aN%Creset

[user]
	email = liambeguin@gmail.com
	name = Liam Beguin
	editor = vi
	whitespace = blank-at-eol,indent-with-non-tab,trailing-space

[gui]
	fontui   = -family \"Terminess Powerline\" -size 12 -weight normal -underline 0 -overstrike 0
	fontdiff = -family \"Terminess Powerline\" -size 12 -weight normal -underline 0 -overstrike 0
	warndetachedcommit = true
	spellingdictionary = none

[help]
	autocorrect = 1

[push]
	default = matching

[log]
	decorate = true
	mailmap = true

[difftool]
	tool = meld
	prompt = false

[merge]
	tool = meld

[mergetool "meld"]
	keepBackup = false
	prompt = false

[color]
	ui     = true
	status = auto
	grep   = auto
	branch = auto

# Use about the same colors as usual grep
[color "grep"]
	context    = normal
	filename   = magenta
	function   = black bold
	linenumber = green
	match      = red bold
	selected   = normal
	separator  = cyan

[color "branch"]
	current = green
	remote  = red
	local   = normal

[grep]
	lineNumber = true

[column]
	ui = never

[sendemail]
	smtpEncryption = tls
	smtpServer     = smtp.gmail.com
	smtpUser       = liambeguin@gmail.com
	smtpServerPort = 587

[alias]
	last    = log -n1
	mt      = mergetool
	oneline = log --no-merges --pretty=ol
	graph   = log --all --oneline --decorate --graph
	# Get the authors with the most commits on a given file
	authors = shortlog -sn
	k       = "!f() { gitk    $@ & }; f"
	ui      = "!f() { git gui $@ & }; f"
	find    = "!f() { git ls-files *${1}*; }; f"
	info    = "!\
		echo; sh -c \"git branch -vv ; \
		echo; git remote -v\"; echo"

	# Open git blame in vim (requires vim-fugitive)
	bl      = "!sh --login -c \"vi +Gblame ${1}\" "

	# Get the most used prefix for a given file
	short = "!\
		f() { \
			git log --format=%s --no-merges $@ \
				| cut -d: -f1 \
				| sort \
				| uniq -c \
				| sort -nr; \
		}; f"

	# Count number of commits since branching from $1
	count = "!\
		f() { \
			base_branch=${1-base}; \
			if git show-branch ${base_branch} &>/dev/null; then \
				echo counting against: $base_branch >/dev/stderr; \
				git rev-list --count HEAD ^${base_branch}; \
			else \
				echo \"fatal: unknown branch '${base_branch}'\"; \
				return 128; \
			fi \
		}; f"

	# Interactively rebase changes since branching from $1
	squashbase = "!\
		f() {\
			base_branch=${1-base}; \
			if git show-branch ${base_branch} &>/dev/null; then \
				count=$(git count ${base_branch}); \
				usleep 200000; \
				git rebase -i --autosquash HEAD~${count}; \
			else \
				echo \"fatal: unknown branch '${base_branch}'\"; \
				return 128; \
			fi \
		}; f"

# vim: ft=gitconfig
