#!/bin/bash
# Most of this was taken from byobu

__logo()
{
	local ret= release=
	release="$(__release)"
	case "$(grep ^NAME /etc/os-release | tr '[:upper:]' '[:lower:]')" in
	*fedora*) ret="#[fg=white,bg=blue] f${release} " ;;
	*centos*) ret="#[fg=magenta,bg=black] ※  " ;;
	*debian*) ret="#[fg=white,bg=red] @ " ;;
	*ubuntu*) ret="#[fg=colour255,bg=colour202] u " ;;
	*)        ret="#[fg=white,bold,bg=black][B]" ;;
	esac
	printf "%s" "$ret"
}

__date()
{
	date +"${TMUX_DATE_FORMAT}"
}

__release()
{
	local ret=
	ret="$(grep ^VERSION_ID /etc/os-release | cut -d= -f2)"
	printf "%s" "$ret"
}

__whoami()
{
	printf "%s@#h" "$(whoami)"
}

__session()
{
	printf "〣#S"
}

__uptime()
{
	local u= idle= str=
	if [ -r /proc/uptime ]; then
		read u idle < /proc/uptime
		u=${u%.*}
		if [ "$u" -gt 86400 ]; then
			str="$(($u / 86400))d$((($u % 86400) / 3600))h"
		elif [ "$u" -gt 3600 ]; then
			str="$(($u / 3600))h$((($u % 3600) / 60))m"
		elif [ "$u" -gt 60 ]; then
			str="$(($u / 60))m"
		else
			str="${u}s"
		fi
	fi

	printf " %s " "$str"
}

__load_avg()
{
	local one= other=
	read one other < /proc/loadavg
	printf " %s " "$one"
}

__ram()
{
	local pct= bg_="red"
	pct=$(free | awk 'NR==2{printf "%.0f", $3*100/$2 }')
	[[ $pct -lt 80 ]] && bg_="brightgreen"
	printf "#[fg=black,bg=%s] %s%% " "$bg_" "$pct"
}

__disk()
{
	local size='' pct='' attr_='fg=black,bg=green'
	# NOTE: <<< is called a here-string
	read size pct <<< "$(df -h -P / | awk 'NR==2 {print $2" "$5}')"
	[ "${pct%?}" -gt 80 ] && attr_="fg=black,bg=yellow"
	[ "${pct%?}" -gt 90 ] && attr_="fg=black,bg=red"
	printf "#[%s] %s%s " "$attr_" "$pct" "$size"
}

__ip()
{
	local iface='' ip=''
	if [ -n "$TMUX_MONITORING_INTERFACE" ]; then
		iface="$TMUX_MONITORING_INTERFACE"
	else
		iface="$(ip route show | grep ^default | awk 'NR==1 {print $5}')"
	fi
	ip="$(ip -4 a show ${iface} | awk 'NR==2 {print $2}')"
	ip=${ip%%/*}

	printf " %s " "$ip"
}

__vpn()
{
	local iface=
	iface=$(
	nmcli -t -f name,type connection show -a | grep ':vpn' | cut -d: -f1 |
	while read -r line; do
		if [ -z "$a" ]; then
			printf "%s" "${line}"
		else
			printf " | %s" "${line}"
		fi
	done)
	printf " %s " "$iface"
}

__battery()
{
	local name='' pct='' state='' eta=''
	name="$(upower -e | grep -i bat)"
	while IFS=':' read tok val; do
		case "$tok" in
			*percentage*) pct=${val##* };;
			*state*)    state=${val##* };;
			*time*)       eta=${val};;
		esac
	done <<- EOF
	$(upower -i $name)
	EOF

	eta=${timeto/ hours/h}
	eta=${timeto##* }

	if [ "$state" == "charging" ]; then
		state="⇑"
	elif [ "$state" == "discharging" ]; then
		state="⇓"
	else
		state=""
	fi

	pct=${pct%?} # remove trailing % char
	if [ -n "$pct" ]; then
		[[ $pct -ge 50 ]] && bg_="green"
		[[ $pct -lt 50 ]] && bg_="yellow"
		[[ $pct -lt 15 ]] && bg_="red"
		printf "#[fg=white,bg=%s] %s%%%s%s " "$bg_" "$pct" "$state" "$eta"
	fi
}

__wifi()
{
	local active_wifi_name=
	active_wifi="$(nmcli -t -f active,ssid,signal device wifi  | grep ^yes)"
	[ -z "$active_wifi" ] && return

	active_wifi="${active_wifi#yes:}"
	active_wifi_name="${active_wifi%:*}"
	active_wifi_signal="${active_wifi#*:}"
	printf " %s%s " "${active_wifi_name}:" "${active_wifi_signal}%"
}

