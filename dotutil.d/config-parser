#
# based on http://theoldschooldevops.com/2008/02/09/bash-ini-parser/
#

PREFIX="cfg_section_"

cfg_parser()
{
	[ ! -f $1 ] && echo "configuration file not found." && exit 1

	shopt -p extglob &> /dev/null
	CHANGE_EXTGLOB=$?
	[ $CHANGE_EXTGLOB = 1 ] && shopt -s extglob

	# read the file
	ini="$(<$1)"
	# escape [
	ini="${ini//\[/\\[}"
	# escape ]
	ini="${ini//]/\\]}"
	# convert to line-array
	IFS=$'\n' && ini=( ${ini} )
	# remove comments with ;
	ini=( ${ini[*]//;*/} )
	# remove init whitespace
	ini=( ${ini[*]/#+([[:space:]])/} )
	# remove whitespace around =
	ini=( ${ini[*]/*([[:space:]])=*([[:space:]])/=} )
	# set section prefix
	ini=( ${ini[*]/#\\[/\}$'\n'"$PREFIX"} )
	# convert text2function (1)
	ini=( ${ini[*]/%\\]/ \(} )
	# convert item to array
	ini=( ${ini[*]/=/=\( } )
	# close array parenthesis
	ini=( ${ini[*]/%/ \)} )
	# the multiline trick
	ini=( ${ini[*]/%\\ \)/ \\} )
	# convert text2function (2)
	ini=( ${ini[*]/%\( \)/\(\) \{} )
	# remove extra parenthesis
	ini=( ${ini[*]/%\} \)/\}} )
	# clean previous definition of section
	ini=( ${ini[*]/%\{/\{$'\n''cfg_unset ${FUNCNAME/#'$PREFIX'}'$'\n'} )
	# remove first element
	ini[0]=""
	# add the last brace
	ini[${#ini[*]} + 1]='}'
	# eval the result
	eval "$(echo "${ini[*]}")"

	EVAL_STATUS=$?
	[ $CHANGE_EXTGLOB = 1 ] && shopt -u extglob

	return $EVAL_STATUS
}

cfg_writer()
{
	SECTION=$1
	OLDIFS="$IFS"
	IFS=' '$'\n'
	if [ -z "$SECTION" ]
	then
		fun="$(declare -F)"
	else
		fun="$(declare -F $PREFIX$SECTION)"
		if [ -z "$fun" ]
		then
			echo "section $SECTION not found" >2
			exit 1
		fi
	fi
	fun="${fun//declare -f/}"
	for f in $fun; do
		[ "${f#$PREFIX}" == "${f}" ] && continue
		item="$(declare -f ${f})"
		item="${item##*\{}" # remove function definition
		item="${item##*FUNCNAME*$PREFIX\};}" # remove clear section
		item="${item/\}}"  # remove function close
		item="${item%)*}" # remove everything after parenthesis
		item="${item});" # add close parenthesis
		vars=""
		while [ "$item" != "" ]
		do
			newvar="${item%%=*}" # get item name
			vars="$vars $newvar" # add name to collection
			item="${item#*;}" # remove readed line
		done
		eval $f
		echo "[${f#$PREFIX}]" # output section
		for var in $vars; do
			eval 'local length=${#'$var'[*]}' # test if var is an array
			if [ $length == 1 ]
			then
				echo $var=\"${!var}\" #output var
			else
				echo ";$var is an array" # add comment denoting var is an array
				eval 'echo $var=\"${'$var'[*]}\"' # output array var
			fi
		done
	done
	IFS="$OLDIFS"
}

cfg_unset()
{
	SECTION=$1
	OLDIFS="$IFS"
	IFS=' '$'\n'

	if [ -z "$SECTION" ]; then
		fun="$(declare -F)"
	else
		fun="$(declare -F $PREFIX$SECTION)"
		if [ -z "$fun" ]
		then
			echo "section $SECTION not found" >2
			return
		fi
	fi
	fun="${fun//declare -f/}"
	for f in $fun; do
		[ "${f#$PREFIX}" == "${f}" ] && continue
		item="$(declare -f ${f})"
		item="${item##*\{}"                  # remove function definition
		item="${item##*FUNCNAME*$PREFIX\};}" # remove clear section
		item="${item/\}}"                    # remove function close
		item="${item%)*}"                    # remove everything after ')'
		item="${item});"                     # add close parenthesis
		vars=""
		while [ "$item" != "" ]; do
			newvar="${item%%=*}" # get item name
			vars="$vars $newvar" # add name to collection
			item="${item#*;}"    # remove readed line
		done
		for var in $vars; do
			unset $var
		done
	done
	IFS="$OLDIFS"
}

cfg_clear()
{
	SECTION=$1
	OLDIFS="$IFS"
	IFS=' '$'\n'

	if [ -z "$SECTION" ]; then
		fun="$(declare -F)"
	else
		fun="$(declare -F $PREFIX$SECTION)"
		if [ -z "$fun" ]; then
			echo "section $SECTION not found" >2
			exit 1
		fi
	fi
	fun="${fun//declare -f/}"
	for f in $fun; do
		[ "${f#$PREFIX}" == "${f}" ] && continue
		unset -f ${f}
	done
	IFS="$OLDIFS"
}

cfg_update() {
	SECTION=$1
	VAR=$2
	OLDIFS="$IFS"
	IFS=' '$'\n'

	fun="$(declare -F $PREFIX$SECTION)"
	if [ -z "$fun" ]; then
		echo "section $SECTION not found" >2
		exit 1
	fi

	fun="${fun//declare -f/}"
	item="$(declare -f ${fun})"
	item="${item/\}}"  # remove function close
	item="${item}
	$VAR=(${!VAR})
	"
	item="${item}
}" # close function again

eval "function $item"
}


# vim: filetype=sh
