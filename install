#!/bin/bash

#####
# Setting Global variables
#
PIP_install="sudo pip install "

dotfiles_home="$(dirname $0)"
dotfiles_home="$(readlink -f $dotfiles_home)"
start_dir="$(pwd)"
start_dir="$(readlink -f $start_dir)"
EXTRA_SCRIPTS="$(find $dotfiles_home/extra -executable -type f 2>/dev/null)"

VERBOSE="no"
ASSUMEYES="no"
DO_RC="yes"
DO_GNOME_TERM="yes"
DO_BYOBU="yes"
DO_VUNDLE="yes"
DO_PAGER="yes" #vimcat &Co
DO_PIP="yes"   #cheat speedtest, ...
DO_CHROME="yes"   # add google repo and install google chrome
DO_BIN="yes"

BASE_PIP_PACKAGES="cheat speedtest-cli"
APPEND_PIP=""

DO_GIT="yes"
GIT_username="Liam BEGUIN"
GIT_email="liambeguin@gmail.com"

DO_EXTRA="no"

# List of RPMs to be installed
BASE_PACKAGES=" \
	screen \
	vim \
	vlc \
	thunderbird \
	ShellCheck \
	tig \
	gstreamer-tools \
	gstreamer-plugins-base \
	gstreamer-plugins-good \
	gstreamer-plugins-bad \
	gstreamer-plugins-ugly \
	"
APPEND_PACKAGES=""


# Perform program exit housekeeping
cleanup() {
	echo "Exiting ..."
	exit
}
trap cleanup SIGHUP SIGINT SIGTERM

# These will be install further
source ./bash/colorutils.conf
source ./bash/shutils.conf

usage(){
	cat <<EOF
NAME
	install - Bootstrap a new user and keep track of your dotfiles.

SYNOPSIS
	$(basename $0) [option]...

DESCRIPTION
	-h | --help ................ Display this message
	-v | --verbose ............. Enable verbose output
	-y | --assumeyes ........... Answer yes for all questions
	--disable-rc ............... Do not attempt to link bashrc, vimrc and screenrc
	--disable-gnome-term ....... Do not attempt to setup gnome-terminal
	--gnome-profile [PRO] ...... Use PRO instead of default profile
	--disable-byobu ............ Do not attempt to install Byobu window manager
	--disable-vundle ........... Do not attempt to install Vim Bundles
	--disable-pager ............ Do not attempt to install vimpager
	--disable-pip .............. Do not attempt to install python and pip packages
	--disable-chrome ........... Do not attempt to install google chrome
	--disable-bin .............. Do not attempt to install bin commands to ${HOME}/bin

	--disable-git .............. Do not configure git
	--git-username [username] .. Use username as git user (void if --disable-git)
	--git-email [email] ........ Use email as git email (void if --disable-git)

	--append-packages [pkgs] ... add pkgs to the list of packages to be installed
	--append-pip [py-pkgs] ..... add py-pkgs to the list of packages to be installed
	--enable-extra ............. Install executable scripts in $dotfiles_home/extra

	--clean .................... Undo changes

DEFAULT SETTINGS
$(print_settings | tail -n+2)

EOF
	exit 0
}

# Usage: is_pkg_available "list of packages"
# for this to work, PM needs to be defined !
is_pkg_available() {
	[ -z "$PM" ] && failure "No package manager defined !"

	for package in $@; do
		if [ -z "$($PM search -y -q $package 2>/dev/null)" ]; then
			failure "$package is not available on your system."
		fi
	done
}
pm_chk_and_install(){
	if [ -z "$PM_install" ]; then
		failure "No Package Manager found..."
	fi
	is_pkg_available "$@"
	$PM_install $@ || failure "Failed to install $@"
}

configure() {
	DISTRO="$(get_distro)"
	case "$DISTRO" in
		Fedora|RHEL|CentOS*)
			# We need sudo to install stuff
			if groups $(whoami) | grep wheel &>/dev/null ; then
				verbose "good! you're sudo"
			else
				failure "$(whoami) is not in wheel group try : 'sudo usermod -aG wheel $(whoami)'"
			fi
			# if we cannot find dnf, use yum...
			PM="$(which dnf 2> /dev/null || which yum 2> /dev/null)"
			PM_install="sudo $PM install -y -q "
			TERMINAL_FONTS="terminus-fonts terminus-fonts-console"
			if [ -z "$GNOME_profile" ]; then
				GNOME_profile="$dotfiles_home/gnome-terminal/terminal_settings"
			fi
			edit_gnome_terminal="dconf load /org/gnome/terminal/legacy/ < $GNOME_profile"
			;;
		Ubuntu|Debian)
			# We need sudo to install stuff
			if groups $(whoami) | grep sudo &>/dev/null ; then
				verbose "good! you're sudo"
			else
				failure "$(whoami) is not in sudo group try : 'sudo usermod -aG sudo $(whoami)'"
			fi
			sudo apt-get install -y -qq aptitude
			if [ -z "$(which aptitude 2>/dev/null)" ]; then
				failure "Could not find aptitude command!"
			fi
			PM="$(which aptitude 2>/dev/null)"
			PM_install="sudo $PM install -y -q "
			TERMINAL_FONTS="xfonts-terminus console-terminus"
			if [ -z "$GNOME_profile" ]; then
				GNOME_profile="$dotfiles_home/gnome-terminal/profile.xml"
			fi
			edit_gnome_terminal="gconftool-2 --load $GNOME_profile"
			;;
		ukn)
			failure "Could not figure out which distro you're running..."
			;;
		*)
			failure "It looks like you're running an unsupported distro. Sorry !"
			;;
	esac

	verbose "Checking if gnome-terminal is available on the host..."
	if [ -z "$(which gnome-terminal 2>/dev/null)" ]; then
		verbose "gnome-terminal not found..."
		DO_GNOME_TERM="no"
	else
		verbose "OK"
	fi
}

print_settings(){
	echo
	echo -e "  * verbose? ${txtblu}$VERBOSE${txtrst}"
	echo -e "  * assume yes? ${txtblu}$ASSUMEYES${txtrst}"
	echo -e "  * link dotfiles? ${txtblu}$DO_RC${txtrst}"
	echo -e "  * setup gnome-terminal? ${txtblu}$DO_GNOME_TERM${txtrst}"
	echo -e "  * install Byobu window manager? ${txtblu}$DO_BYOBU${txtrst}"
	echo -e "  * install vim bundles? ${txtblu}$DO_VUNDLE${txtrst}"
	echo -e "  * install vimpager? ${txtblu}$DO_PAGER${txtrst}" #vimcat &Co
	echo -e "  * install google chrome? ${txtblu}$DO_CHROME${txtrst}"
	echo -e "  * install bin commands ? ${txtblu}$DO_BIN${txtrst}"

	echo -e "  * install Python and pip packages? ${txtblu}$DO_PIP${txtrst}"   #cheat speedtest, ...
	if [ "$DO_PIP" == "yes" ]; then
		echo -e "    - pip packages to be installed : ${txtblu}$BASE_PIP_PACKAGES${txtrst}"
	fi

	echo -e "  * configure git env? ${txtblu}$DO_GIT${txtrst}"
	if [ "$DO_GIT" == "yes" ]; then
		echo -e "    - push.default : ${txtblu}matching${txtrst} #hardcoded"
		echo -e "    - color.ui     : ${txtblu}true${txtrst} #hardcoded"
		echo -e "    - user.name    : ${txtblu}$GIT_username${txtrst}"
		echo -e "    - user.email   : ${txtblu}$GIT_email${txtrst}"
	fi

	echo -e "  * process scripts in $dotfiles_home/extra? ${txtblu}$DO_EXTRA${txtrst}"
	if [ "$DO_EXTRA" == "yes" ]; then
		if [ -n "$EXTRA_SCRIPTS" ]; then
			echo -e "    - the following files will be processed :"
			for file in $EXTRA_SCRIPTS; do
				echo -e "         ${txtblu}$(basename $file)${txtrst}"
			done
		fi
	fi

	echo -e "  * packages to be installed :"
	echo -e "${txtblu}$(echo $BASE_PACKAGES | tr -s ' '| tr ' ' '\n' | sed 's/\(^.\)/      \* \1/g')${txtrst}"
	echo -e
}


#####
# Starts here !

# If the script is run as root, $HOME is going to be wrong
[ $(whoami) = "root" ] && failure "This must NOT be run as root !"
# Check if we are connected to the internet...
ping -c2 google.com > /dev/null
if [ $? != 0 ]; then
	read -p "Are you really connected to the internet ?"
	[ $rc != "y" ] && failure "Exiting upon your request !"
fi

OPTS=$(getopt -o h,v,y --long help,verbose,assumeyes,\
disable-rc,disable-gnome-term,gnome-profile:,disable-byobu,disable-vundle,disable-pager,disable-pip,\
disable-git,git-username:,git-email:,\
disable-chrome,\
disable-bin,\
append-packages:,append-pip:,enable-extra,clean -- "$@")
eval set -- "$OPTS"

while true; do
	case "$1" in
		-h|--help)
			usage
			;;
		-v|--verbose)
			VERBOSE="yes"
			shift
			;;
		-y|--assumeyes)
			ASSUMEYES="yes"
			shift
			;;
		--disable-rc)
			DO_RC="no"
			shift
			;;
		--disable-gnome-term)
			DO_GNOME_TERM="no"
			shift
			;;
		--gnome-profile)
			GNOME_profile="$(readlink -f $2)"
			shift 2
			;;
		--disable-byobu)
			DO_BYOBU="no"
			shift
			;;
		--disable-vundle)
			DO_VUNDLE="no"
			shift
			;;
		--disable-pager)
			DO_PAGER="no"
			shift
			;;
		--disable-pip)
			DO_PIP="no"
			shift
			;;
		--disable-git)
			DO_GIT="no"
			shift
			;;
		--git-username)
			GIT_username="$2"
			shift 2
			;;
		--git-email)
			GIT_email="$2"
			shift 2
			;;
		--disable-chrome)
			DO_CHROME="no"
			shift
			;;
		--disable-bin)
			DO_BIN="no"
			shift
			;;
		--append-packages)
			APPEND_PACKAGES="$2"
			BASE_PACKAGES="$BASE_PACKAGES $APPEND_PACKAGES"
			shift 2
			;;
		--append-pip)
			APPEND_PIP="$2"
			BASE_PIP_PACKAGES="$BASE_PIP_PACKAGES $APPEND_PIP"
			shift 2
			;;
		--enable-extra)
			DO_EXTRA="yes"
			shift
			;;
		--clean)
			failure "clean not yet implemented"
			shift
			;;
		--)
			shift
			break
			;;
		*)
			failure "Unknown argument."
			break
			;;
	esac
done

# Add python stuff is needed
[ "$DO_PIP" == "yes" ] && BASE_PACKAGES="$BASE_PACKAGES python python-pip"

print_settings
if [ "$ASSUMEYES" == "no" ]; then
	read -p "Does this look ok ? [y/n] " rc
	[ $rc != "y" ] && failure "Exiting upon your request !"
else
	verbose "assuming yes"
fi
configure

#####
# Initial system update
verbose "Current system distribution is : " $DISTRO
verbose "First, lets make sure the system is up-to-date !"
sudo $PM -y -q update || failure "failed to update your system"
verbose "Installing BASE_PACKAGES..."
pm_chk_and_install "$BASE_PACKAGES"
verbose "done"

# Editing Window focus mode
if [ -n $DISPLAY ]; then
	verbose "Setting focus-mode to mouse..."
	dconf write /org/gnome/desktop/wm/preferences/focus-mode "string 'mouse'"
	verbose "done"
else
	warning "Not setting focus mode"
fi

if [ "$DO_RC" == "yes" ]; then

	# Warn the user this is dangerous
	echo "This will delete all your current bashrc, vimrc and screenrc !"
	if [ "$ASSUMEYES" == "no" ]; then
		read -p "Continue ? [y/n] " rc
		[ $rc != "y" ] && failure "Exiting upon your request !"
	else
		verbose "assuming yes"
	fi

	verbose "Linking dotfiles..."
	mkdir -p ${HOME}/bin
	mkdir -p ${HOME}/.bash
	# Installing a few bash functions I often use
	ln -sf $dotfiles_home/bash/colorutils.conf ${HOME}/.bash
	ln -sf $dotfiles_home/bash/shutils.conf ${HOME}/.bash
	# Add the rest of my basic files included in bashrc
	ln -sf $dotfiles_home/bash/aliases.conf ${HOME}/.bash
	ln -sf $dotfiles_home/bash/ps1.conf ${HOME}/.bash
	ln -sf $dotfiles_home/bash/screen.conf ${HOME}/.bash

	ln -sf $dotfiles_home/bashrc ${HOME}/.bashrc
	ln -sf $dotfiles_home/screenrc ${HOME}/.screenrc
	ln -sf $dotfiles_home/vimrc ${HOME}/.vimrc

	verbose "Installing Bash completion scripts..."
	for file in $dotfiles_home/autocompletion/*; do
		verbose "Deploying $file"
		sudo cp $file /etc/bash_completion.d/
	done
	verbose "done"
fi

if [ "$DO_GNOME_TERM" == "yes" ]; then
	verbose "Setting up gnome-terminal..."
	verbose "Installing fonts..."
	TMP_FONT_DIR="/tmp/fonts.$$"
	git clone https://github.com/powerline/fonts.git $TMP_FONT_DIR
	$TMP_FONT_DIR/install.sh
	if [ -n $DISPLAY ]; then
		verbose "Editing gnome-terminal settings..."
		eval $edit_gnome_terminal
	else
		warning "Called within ssh session, not editing gnome-terminal config"
	fi
	rm -rf $TMP_FONT_DIR
fi

if [ "$DO_BYOBU" == "yes" ]; then
	pm_chk_and_install "byobu"
	unlink ${HOME}/.byobu
	ln -sf $(pwd)/byobu ${HOME}/.byobu

fi

if [ "$DO_VUNDLE" == "yes" ]; then
	# WARNING because we clone vundle inside ~/.vim if later we need to link
	#         the whole .vim folder, we'll have to ignore vundle in .gitignore
	#         or some place else...
	verbose "Installing Vundle and other bundles listed in vimrc..."
	# XXX NOTE: vimrc doesn't fail even if the sourced file doe not exist.
	mkdir -p ${HOME}/.vim/plugin/
	ln -sf $dotfiles_home/vim/airline.vim ${HOME}/.vim/plugin/
	ln -sf $dotfiles_home/vim/plugins.vim ${HOME}/.vim/plugin/
	ln -sf $dotfiles_home/vim/local.vim ${HOME}/.vim/
	if [ ! -d ${HOME}/.vim/bundle/Vundle.vim ]; then
		git clone https://github.com/gmarik/Vundle.vim.git ${HOME}/.vim/bundle/Vundle.vim
	else
		verbose "Looks like vundle is already installed..."
	fi
	# Installing bundles...
	vim +PluginInstall +qall
	verbose "done"
fi

if [ "$DO_PAGER" == "yes" ]; then
	verbose "Installing Vimpager..."
	# Adding aliases and stuff in bashrc
	mkdir -p ${HOME}/.bash
	ln -sf $dotfiles_home/bash/pager.conf ${HOME}/.bash/pager.conf
	# Get dependencies
	pm_chk_and_install "pandoc"
	git clone https://github.com/rkitover/vimpager.git $dotfiles_home/vimpager
	pushd $dotfiles_home/vimpager
	sudo make install
	verbose "Cleaning up..."
	popd
	# FIXME we sould NOT need sudo here !
	sudo rm -rf $dotfiles_home/vimpager
	verbose "done"
fi

if [ "$DO_PIP" == "yes" ]; then

	verbose "Installing pip packages..."
	verbose " First upgrade pip to it's latest version..."
	$PIP_install --upgrade pip

	verbose " Installing : $BASE_PIP_PACKAGES"
	$PIP_install $BASE_PIP_PACKAGES
	verbose " linking personnal cheats..."
	# Warn the user this is dangerous
	echo "This will delete all your current cheatsheets..."
	if [ "$ASSUMEYES" == "no" ]; then
		read -p "Continue ? [y/n] " rc
		[ $rc != "y" ] && failure "Exiting upon your request !"
	else
		verbose "assuming yes"
	fi
	rm -rf ${HOME}/.cheat
	ln -sf $(pwd)/cheat ${HOME}/.cheat
	verbose "done"
fi

if [ "$DO_GIT" == "yes" ]; then
	git config --global user.name  "$GIT_username"
	git config --global user.email "$GIT_email"
	# When push.default is set to 'matching', git will push local branches
	# to the remote branches that already exist with the same name.
	git config --global push.default matching
	# Enable coloring
	git config --global color.ui true
fi

if [ "$DO_CHROME" == "yes" ]; then
	verbose "Enabling Google yum repository..."
	cat << EOF > /tmp/google-chrome.repo
[google-chrome]
name=google-chrome - \$basearch
baseurl=http://dl.google.com/linux/chrome/rpm/stable/\$basearch
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
EOF
	sudo mv /tmp/google-chrome.repo /etc/yum.repos.d/google-chrome.repo
	verbose "Installing google chrome stable"
	sudo dnf install -y google-chrome-stable
	verbose "done"
fi

if [ "$DO_BIN" == "yes" ]; then
	for file in $dotfiles_home/bin/*; do
		verbose "Adding $file"
		chmod +x $file
		ln -sf $file ${HOME}/bin/
	done
fi

if [ "$DO_EXTRA" == "yes" ]; then
	for file in $EXTRA_SCRIPTS; do
		echo -e ${txtblu} Running : ${txtrst}$file
		$file || failure "Something went wrong while running : $file"
	done
fi

echo -e "${txtgrn} ===> All Good !!${txtrst}"

# vim:set cc=80 :
