#!/bin/sh

#####
# Setting Global variables
#
SUPPORTED_DISTROS="fedora"
DISTRO=$(lsb_release -ir | cut -d':' -f2)

GIT_username="Liam BEGUIN"
GIT_email="liambeguin@gmail.com"

PM_install="sudo dnf install -y -q "
PIP_install="sudo pip install "

dotfiles_home="$(dirname $0)"
dotfiles_home="$(readlink -f $dotfiles_home)"
start_dir="$(pwd)"
start_dir="$(readlink -f $start_dir)"

VERBOSE="${VERBOSE:-yes}"
# List of RPMs to be installed
BASE_RPM="byobu screen vim git python-pip python3-pip"

# Perform program exit housekeeping
function cleanup() {
	echo "Exiting ..."
	exit
}
trap cleanup SIGHUP SIGINT SIGTERM


#####
# There is no point doing anything if the host's distro is not supported
for supported in $SUPPORTED_DISTROS; do
	if [ -z "$(echo $DISTRO | grep -i $supported)" ]; then
		echo $DISTRO is not listed in supported distros...
		exit 1
	fi
done


#####
# Installing a few bash functions I often use
mkdir -p ${HOME}/bin
ln -sf $(pwd)/bash/bash_colors.conf ${HOME}/bin/
ln -sf $(pwd)/bash/bash_functions.conf ${HOME}/bin/
source ./bash/bash_colors.conf
source ./bash/bash_functions.conf


#####
# Check a few things about the host before we start
# If we are on an older Fedora release use YUM instead of DNF
[ -z "$(which dnf 2> /dev/null)" ] && PM="sudo yum install -y -q"
# If the script is run as root, $HOME is going to be wrong
[ $(whoami) = "root" ] && exit_err "This must NOT be run as root !"
# We still need sudo to install stuff
if [ -z "$(groups | grep wheel)" ]; then
	exit_err "$(whoami) is not in wheel group try : 'sudo usermod -aG wheel $(whoami)'"
fi
# Warn the user this is dangerous
read -p "This will delete all your old rcfiles and install packages Continue ? [y/n] " rc
[ $rc != "y" ] && exit_err "Exiting upon your request !"


#####
# Initial system update
verbose "Current system release is : " $DISTRO
verbose "First, lets make sure the system is up-to-date !"
sudo dnf -y -q update
$PIP_install --upgrade pip
verbose "\`Done"

# install needed packages
verbose "Installing base packages..."
$PM_install $BASE_RPM || exit_err "Base package list failed to install."
verbose "\`Done"


#####
# dotfiles
verbose "Linking dotfiles..."
ln -sf $(pwd)/bashrc ${HOME}/.bashrc
ln -sf $(pwd)/screenrc ${HOME}/.screenrc
ln -sf $(pwd)/screen/screen_skins ${HOME}/.screen_skins
# Setting up git user
git config --global user.name  "$GIT_username"
git config --global user.email "$GIT_email"
# Setting up vim
ln -sf $(pwd)/vimrc ${HOME}/.vimrc
git clone https://github.com/gmarik/Vundle.vim.git ${HOME}/.vim/bundle/Vundle.vim
# Installing bundles...
vim +PluginInstall +qall
verbose "\`Done"


#####
# bash-autocomplete scripts
verbose "Installing Bash completion scripts..."
for file in $dotfiles_home/autocompletion/*; do
	verbose "Deploying $file"
	sudo cp $file /etc/bash_completion.d/
done
verbose "\`Done"


#####
# gnome-terminal
verbose "Installing fonts..."
$PM_install terminus-fonts terminus-fonts-console || exit_err "Could not install fonts."
verbose "Editing gnome-terminal settings..."
dconf load /org/gnome/terminal/legacy/ < $dotfiles_home/terminal_settings
verbose "\`Done"


#####
# vimpager
verbose "Installing Vimpager..."
cd $dotfiles_home
# Get dependencies
$PM_install pandoc || exit_err "Could not install pandoc."
git clone https://github.com/rkitover/vimpager.git
cd vimpager
sudo make install
cd $dotfiles_home
verbose "| Cleaning up..."
rm -rf vimpager
verbose " \`Done"


#####
# cheat
verbose "Installing cheat tool"
$PIP_install cheat || exit_err "Could not install cheat using pip"
rm -rf ${HOME}/.cheat
ln -sf $(pwd)/cheat ${HOME}/.cheat
verbose "\`Done"


#####
# speedtest-cli
verbose "Installing Speedtest tool..."
$PIP_install speedtest-cli || exit_err "Could not install speedtest-cli using pip"
verbose "\`Done"

echo -e ${txtgrn}All Good \!\!${txtrst}

# vim:set cc=80 :
