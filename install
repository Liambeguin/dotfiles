#!/bin/bash

#####
# Setting Global variables
#
PIP_install="sudo pip install "

dotfiles_home="$(dirname $0)"
dotfiles_home="$(readlink -f $dotfiles_home)"
start_dir="$(pwd)"
start_dir="$(readlink -f $start_dir)"

VERBOSE="no"
DO_RC="yes"
DO_GNOME_TERM="yes"
DO_BYOBU="yes"
DO_VUNDLE="yes"
DO_PAGER="yes" #vimcat &Co
DO_PIP="yes"   #cheat speedtest, ...
BASE_PIP_PACKAGES="cheat speedtest-cli"
APPEND_PIP=""

DO_GIT="yes"
GIT_username="Liam BEGUIN"
GIT_email="liambeguin@gmail.com"

DO_EXTRA="no"

# List of RPMs to be installed
BASE_PACKAGES="screen vim git"
APPEND_PACKAGES=""


# Perform program exit housekeeping
cleanup() {
	echo "Exiting ..."
	exit
}
trap cleanup SIGHUP SIGINT SIGTERM

# These will be install further
source ./bash/bash_colors.conf
source ./bash/bash_functions.conf

usage(){
	cat <<EOF
NAME
	install - Bootstrap a new user and keep track of your dotfiles.

SYNOPSIS
	$(basename $0) [options]

DESCRIPTION
	-h | --help ..................... Display this message
	-v | --verbose .................. Enable verbose output
	--disable-rc ....................* Do not attempt to link bashrc, vimrc and screenrc
	--disable-gnome-term ............* Do not attempt to setup gnome-terminal
	--disable-byobu .................* Do not attempt to install Byobu window manager
	--disable-vundle ................* Do not attempt to install Vim Bundles
	--disable-pager .................* Do not attempt to install vimpager
	--disable-pip ...................* Do not attempt to install python and pip packages

	--disable-git ...................* Do not configure git
	--git-username [username] .......* Use username as git user (void if --disable-git)
	--git-email [email] .............* Use email as git email (void if --disable-git)

	--append-packages [pkgs] ........* add pkgs to the list of packages to be installed
	--append-pip [py-pkgs] ...,......* add py-pkgs to the list of packages to be installed
	--enable-extra ..................* Install executable scripts in $dotfiles_home/extra

	--clean .........................* Undo changes

DEFAULT SETTINGS
	$(print_settings)

EOF
	exit 0
}

# Usage: is_pkg_available "list of packages"
# for this to work, PM needs to be defined !
is_pkg_available() {
	[ -z "$PM" ] && exit_err "No package manager defined !"

	for package in $@; do
		if [ -z "$($PM search -y -q $package 2>/dev/null)" ]; then
			exit_err "$package is not available on your system."
		fi
	done
}

configure() {
	DISTRO="$(get_distro)"
	case "$DISTRO" in
		Fedora|RHEL|CentOS)
			# We need sudo to install stuff
			if [ -z "$(groups | grep wheel)" ]; then
				exit_err "$(whoami) is not in wheel group try : 'sudo usermod -aG wheel $(whoami)'"
			fi
			# if we cannot find dnf, use yum...
			PM="$(which dnf 2> /dev/null || which yum 2> /dev/null)"
			PM_install="sudo $PM install -y -q "
			;;
		Ubuntu|Debian)
			# We need sudo to install stuff
			if [ -z "$(groups | grep sudo)" ]; then
				exit_err "$(whoami) is not in sudo group try : 'sudo usermod -aG sudo $(whoami)'"
			fi
			sudo apt-get install -y -qq aptitude
			if [ -z "$(which aptitude 2>/dev/null)" ]; then
				exit_err "Could not find aptitude command!"
			fi
			PM="$(which aptitude 2>/dev/null)"
			PM_install="sudo $PM install -y -qq "
			;;
		ukn)
			exit_err "Could not figure out which distro you're running..."
			;;
		*)
			exit_err "It looks like you're running an unsupported distro. Sorry !"
			;;
	esac

	# Check if the packages are available for install
	is_pkg_available "$BASE_PACKAGES"
}

print_settings(){
	echo " == Settings == "
	echo "  * verbose? $VERBOSE"
	echo "  * link dotfiles? $DO_RC"
	echo "  * setup gnome-terminal? $DO_GNOME_TERM"
	echo "  * install Byobu window manager? $DO_BYOBU"
	echo "  * install vim bundles? $DO_VUNDLE"
	echo "  * install vimpager? $DO_PAGER" #vimcat &Co

	echo "  * install Python and pip packages? $DO_PIP"   #cheat speedtest, ...
	if [ "$DO_PIP" == "yes" ]; then
		echo "    - pip packages to be installed : $BASE_PIP_PACKAGES"
	fi

	echo "  * configure git env? $DO_GIT"
	if [ "$DO_GIT" == "yes" ]; then
		echo "    - push.default : matching #hardcoded"
		echo "    - user.name    : $GIT_username"
		echo "    - user.email   : $GIT_email"
	fi

	echo "  * process scripts in $dotfiles_home/extra? $DO_EXTRA"
	#TODO add list of executable scripts in extra

	echo "  * packages to be installed : $BASE_PACKAGES"
	echo
}


#####
# Starts here !

# If the script is run as root, $HOME is going to be wrong
[ $(whoami) = "root" ] && exit_err "This must NOT be run as root !"

OPTS=$(getopt -o h,v --long help,verbose,\
disable-rc,disable-gnome-term,disable-byobu,disable-vundle,disable-pager,disable-pip,\
disable-git,git-username:,git-email:,\
append-packages:,append-pip:,enable-extra,clean -- "$@")
eval set -- "$OPTS"

while true; do
	case "$1" in
		-h|--help)
			usage
			;;
		-v|--verbose)
			VERBOSE="yes"
			shift
			;;
		--disable-rc)
			DO_RC="no"
			shift
			;;
		--disable-gnome-term)
			DO_GNOME_TERM="no"
			shift
			;;
		--disable-byobu)
			DO_BYOBU="no"
			shift
			;;
		--disable-vundle)
			DO_VUNDLE="no"
			shift
			;;
		--disable-pager)
			DO_PAGER="no"
			shift
			;;
		--disable-pip)
			DO_PIP="no"
			shift
			;;
		--disable-git)
			DO_GIT="no"
			shift
			;;
		--git-username)
			GIT_username="$2"
			shift 2
			;;
		--git-email)
			GIT_email="$2"
			shift 2
			;;
		--append-packages)
			APPEND_PACKAGES="$2"
			BASE_PACKAGES="$BASE_PACKAGES $APPEND_PACKAGES"
			shift 2
			;;
		--append-pip)
			APPEND_PIP="$2"
			BASE_PIP_PACKAGES="$BASE_PIP_PACKAGES $APPEND_PIP"
			shift 2
			;;
		--enable-extra)
			DO_EXTRA="yes"
			shift
			;;
		--clean)
			exit_err "clean not yet implemented"
			shift
			;;
		--)
			shift
			break
			;;
		*)
			exit_err "Unknown argument."
			break
			;;
	esac
done

# Add python stuff is needed
[ "$DO_PIP" == "yes" ] && BASE_PACKAGES="$BASE_PACKAGES python python-pip"

print_settings

exit 0
configure
# EVERYTHING AFTER THIS POINT SHOULD BE DISTRO INDEPENDANT !!

#####
# ALWAYS DO
# Initial system update
verbose "Current system release is : " $DISTRO
verbose "First, lets make sure the system is up-to-date !"
sudo $PM -y -q update

# Move to PIP section
$PIP_install --upgrade pip

#####
## IF NOT --disable-rc :
## Installing a few bash functions I often use
mkdir -p ${HOME}/bin
ln -sf $(pwd)/bash/bash_colors.conf ${HOME}/bin/
ln -sf $(pwd)/bash/bash_functions.conf ${HOME}/bin/
# dotfiles
verbose "Linking dotfiles..."
ln -sf $(pwd)/bashrc ${HOME}/.bashrc
ln -sf $(pwd)/screenrc ${HOME}/.screenrc
ln -sf $(pwd)/screen/screen_skins ${HOME}/.screen_skins


# Warn the user this is dangerous
read -p "This will delete all your old rcfiles and install packages Continue ? [y/n] " rc
[ $rc != "y" ] && exit_err "Exiting upon your request !"



# install needed packages
verbose "Installing base packages..."
$PM_install $BASE_RPM || exit_err "Base package list failed to install."
verbose "\`Done"


#####
ln -sf $(pwd)/byobu ${HOME}/.byobu
# Setting up git user
git config --global user.name  "$GIT_username"
git config --global user.email "$GIT_email"
# When push.default is set to 'matching', git will push local branches
# to the remote branches that already exist with the same name.
git config --global push.default matching
# Setting up vim
ln -sf $(pwd)/vimrc ${HOME}/.vimrc
git clone https://github.com/gmarik/Vundle.vim.git ${HOME}/.vim/bundle/Vundle.vim
# Installing bundles...
vim +PluginInstall +qall
verbose "\`Done"


#####
# bash-autocomplete scripts
verbose "Installing Bash completion scripts..."
for file in $dotfiles_home/autocompletion/*; do
	verbose "Deploying $file"
	sudo cp $file /etc/bash_completion.d/
done
verbose "\`Done"


#####
# gnome-terminal
verbose "Installing fonts..."
$PM_install terminus-fonts terminus-fonts-console || exit_err "Could not install fonts."
verbose "Editing gnome-terminal settings..."
dconf load /org/gnome/terminal/legacy/ < $dotfiles_home/terminal_settings
verbose "\`Done"


#####
# vimpager
verbose "Installing Vimpager..."
cd $dotfiles_home
# Get dependencies
$PM_install pandoc || exit_err "Could not install pandoc."
git clone https://github.com/rkitover/vimpager.git
cd vimpager
sudo make install
cd $dotfiles_home
verbose "| Cleaning up..."
rm -rf vimpager
verbose " \`Done"


#####
# cheat
verbose "Installing cheat tool"
$PIP_install cheat || exit_err "Could not install cheat using pip"
rm -rf ${HOME}/.cheat
ln -sf $(pwd)/cheat ${HOME}/.cheat
verbose "\`Done"


#####
# speedtest-cli
verbose "Installing Speedtest tool..."
$PIP_install speedtest-cli || exit_err "Could not install speedtest-cli using pip"
verbose "\`Done"

echo -e ${txtgrn}All Good \!\!${txtrst}

# vim:set cc=80 :
